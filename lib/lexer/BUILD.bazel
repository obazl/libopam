load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl",
     "BASE_COPTS",
     "BASE_DEFINES",
     "BASE_LOCAL_DEFINES",
     "BASE_DEPS",
     "BASE_LINKOPTS")

COPTS         = BASE_COPTS
DEPS          = BASE_DEPS
LINKOPTS      = BASE_LINKOPTS
TOOLCHAINS = ["//:module_profiles"]

# exports_files(glob(["*.c"], exclude = ["macors_ndebug.h"]))

###########
cc_library(
    name = "opam_lexer",
    srcs = [
        "opam_lexer.c",
        "opam_lexis.c",
        ":mkhdrs"
    ],
    hdrs = ["opamlexer.h"],
    implementation_deps = DEPS,
    deps = ["@uthash//lib:uthash"],
    copts = COPTS + [
        "-Wno-unused-parameter", # macos

        "-I$(GENDIR)/$(@)/lib/lexer",
        # "-I$(@liblogc)/lib",
        # "-I$(@uthash)/lib"
    ] + select({
        # suppress: lexis.re:355:50: error: 'yyt2' may be used uninitialized in this function [-Werror=maybe-uninitialized]
        "@platforms//os:linux": ["-Wno-maybe-uninitialized"],
        "//conditions:default": []
    }),
    defines = BASE_DEFINES,
    local_defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-enabled": ["LEXDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-version": ["LEXDEBUG_VERSION"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fpf": ["LEXDEBUG_FPF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fvf": ["LEXDEBUG_FVF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-build-filter": ["LEXDEBUG_BUILD_FILTER"],
        "//conditions:default":   []
    }),
    toolchains = TOOLCHAINS,
    visibility = ["//test:__subpackages__",
                  "//lib/parser:__pkg__"]
)

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "opam_lexer.c",
        "opam_lexis.c",
        # "opam_config.c",
        # "cmd_runner.c",
        # "opam_parser.c",
        # "opam_package.c", ## ast node types, etc.
    ],
    additional_srcs = [
        "//lib/parser:opam_syntaxis.c", ## defines token_type constants
    ] + select({
        "@makeheaders//compilation_mode:fastbuild": [
            "@makeheaders//logging:ansi_colors.h",
            "@makeheaders//logging:macros_debug.h"
        ],
        "//conditions:default": [
            "@makeheaders//logging:macros_ndebug.h"
        ]
    }),
    visibility = ["//visibility:public"]
)

makeheaders(
    name = "mkhdrs_export",
    out = "opamlexer.h",
    export_interface = True,
    hdrs_srcs = [
        # "opam_config.c",
        "opam_lexer.c",
        "opam_lexis.c",
        # "opam_parser.c",
        # "opam_package.c",
        # "opam_syntaxis.c",
        # "//lib/emitters:mkhdrs"
        ],
    additional_srcs = [
        "//lib/parser:opam_syntaxis.c", ## defines token_type constants
        ],
    visibility = ["//visibility:public"]
)

################################################################
## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})

