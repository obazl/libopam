load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//src:RULES.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS")

SRCS          = BASE_SRCS
COPTS         = BASE_COPTS + BASE_INCLUDE_PATHS
DEPS          = BASE_DEPS
DEFINES       = BASE_DEFINES + ["DEBUG_$(COMPILATION_MODE)"]
LINKOPTS      = BASE_LINKOPTS
TOOLCHAINS = ["//:repo_paths"]

exports_files(glob(["*.c"], exclude = ["macros_ndebug.h"]))

################################################################
####    OPAM Parser
################################################################
cc_library(
    name = "opam_parser",
    srcs = SRCS + [
        "opam_parser.c",
        ":mkhdrs"
        ],
    # hdrs = [
    #     "libopamparser.h",
    # ],
    copts = COPTS + [
        # "-Wno-unused-variable", # in lemon-generated code

        "-I$(GENDIR)/$(@)/src/parser",

        "-I$(GENDIR)/$(@)/src/lexer",
        "-I$(@liblogc)/src",
        "-I$(@uthash)/src",
    ],
    local_defines = DEFINES + select({
        ":lexdebug-enabled": ["LEXDEBUG"],
        "//conditions:default":   []
    }),
    deps = DEPS + [
        ":opam_syntaxis",
        "//src/lexer:opam_lexer",
        # "@liblogc//src:logc",
        "@uthash//src:uthash"
    ],
    toolchains = TOOLCHAINS,
    visibility = [
        "//src:__pkg__",
        "//extender:__pkg__",
        "//test:__subpackages__"
    ]
)

###########
cc_library(
    name = "opam_syntaxis",
    srcs = [
        "opam_syntaxis.c",
        ":mkhdrs"
    ],
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash"
    ],
    copts = COPTS + [
        "-Wno-unused-variable",  # from lemon-generated code
        "-Wno-unused-parameter",  # from lemon-generated code

        "-I.", ## DO NOT REMOVE!!!
        "-I$(@liblogc)/src",
        "-I$(@uthash)/src"
    ],
    defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":yytrace-enabled": ["YYTRACE"],
        "//conditions:default":   []
    }),
    toolchains = TOOLCHAINS,
    # to add: YYDEBUG_FILTER, etc.
    visibility = ["//test:__subpackages__"]
)

lemon(
    name = "gen_opam_syntaxis",
    yy   = "opam_syntaxis.y",
    outs = ["opam_syntaxis.c","opam_syntaxis.out"],
    compress = False,
    ## NB: these are for lemon's %if, not cpp's #if
    ## fvf = filtered version formula
    ## fpf = filtered package formula
    defines = select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-exit-on-error-enabled": ["YYDEBUG_EXIT_ON_ERROR"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-filter": ["YYDEBUG_FILTER"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-fpf": ["YYDEBUG_FPF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fvf": ["YYDEBUG_FVF"],
        "//conditions:default":   []
    }) + select({
        ":yydebug-build-filter": ["YYDEBUG_BUILD_FILTER"],
        "//conditions:default":   []
    }),
    visibility = ["//src/hdrs:__pkg__", "//src/lexer:__pkg__"]
)

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        # "opam_config.c",
        # "cmd_runner.c",
        "opam_parser.c",
        "opam_syntaxis.c", ## defines token_type constants
        "opam_package.c", ## ast node types, etc.
    ],
    additional_srcs = [
        "//src/lexer:opamlexer.h",
        "//src:ansi_colors.h",
    ] + select({
        "//config/compilation_mode:fastbuild?": [
            "//src:macros_debug.h"
        ],
        "//conditions:default": ["//src:macros_ndebug.h"]
    }),
    visibility = ["//visibility:public"]
)

# makeheaders(
#     name = "mkhdrs_export",
#     out = "opamc.h",
#     export_interface = True,
#     hdrs_srcs = [
#         # "opam_config.c",
#         # "opam_lexer.c",
#         "opam_parser.c",
#         "opam_syntaxis.c",
#         "opam_package.c",
#         # "opam_lexis.c",
#         # "//src/emitters:mkhdrs"
#     ],
#     visibility = ["//visibility:public"]
# )

################################################################
## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})

