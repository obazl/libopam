load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//src:RULES.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS")

SRCS          = BASE_SRCS
COPTS         = BASE_COPTS + BASE_INCLUDE_PATHS
DEPS          = BASE_DEPS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS
TOOLCHAINS = ["//:repo_paths"]

# exports_files(glob(["*.c"], exclude = ["tracing_disabled.h"]))

###########
cc_library(
    name = "opam_lexer",
    srcs = [
        "opam_lexer.c",
        "opam_lexis.c",
        ":mkhdrs"
    ],
    hdrs = ["opamlexer.h"],
    deps = DEPS + ["@uthash//src:uthash"],
    copts = COPTS + [
        "-Wno-unused-parameter", # macos

        "-I$(GENDIR)/$(@)/src/lexer",
        "-I$(@liblogc)/src",
        "-I$(@uthash)/src"
    ],
    local_defines = DEFINES + select({
        ":yydebug-enabled": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-enabled": ["LEXDEBUG"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-version": ["LEXDEBUG_VERSION"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fpf": ["LEXDEBUG_FPF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-fvf": ["LEXDEBUG_FVF"],
        "//conditions:default":   []
    }) + select({
        ":lexdebug-build-filter": ["LEXDEBUG_BUILD_FILTER"],
        "//conditions:default":   []
    }),
    toolchains = TOOLCHAINS,
    visibility = ["//test:__subpackages__",
                  "//src/parser:__pkg__"]
)

################################################################
# re2c takes a long time to build, so we only run it
# when opam_lexis.re changes, which is rare.
# to regenerate opam_lexis.c: delete src/opam_lexis.c
# and uncomment this target. Once the new version is copacetic,
# copy it into the src tree and comment this out.
# genrule(
#     name = "gen_opam_lexis",
#     outs  = ["opam_lexis.c"],
#     srcs = ["opam_lexis.re"],
#     tools = ["@re2c//:re2c"],
#     cmd   = "\n".join([
#         "for f in $(locations @re2c//:re2c)",
#         "do",
#         "    if [ -f $$f ]",
#         "    then",
#         "        if [ re2c = `basename $$f` -a -x $$f ]",
#         "        then",
#         "            break",
#         "        fi",
#         "    fi",
#         "done",
#         "$$f --conditions --tags -o $(@D)/opam_lexis.c $(location opam_lexis.re)",
#     ]),
#     visibility = ["//visibility:public"]
# )

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "opam_lexer.c",
        "opam_lexis.c",
        # "opam_config.c",
        # "cmd_runner.c",
        # "opam_parser.c",
        # "opam_package.c", ## ast node types, etc.
    ],
    additional_srcs = [
        "//src/parser:opam_syntaxis.c", ## defines token_type constants
    ] + select({
        "//config/profile:dev?": [
            "//src:ansi_colors.h", "//src:tracing_enabled.h"
        ],
        "//conditions:default": ["//src:tracing_disabled.h"]
    }),
    visibility = ["//visibility:public"]
)

makeheaders(
    name = "mkhdrs_export",
    out = "opamlexer.h",
    export_interface = True,
    hdrs_srcs = [
        # "opam_config.c",
        "opam_lexer.c",
        "opam_lexis.c",
        # "opam_parser.c",
        # "opam_package.c",
        # "opam_syntaxis.c",
        # "//src/emitters:mkhdrs"
        ],
    additional_srcs = [
        "//src/parser:opam_syntaxis.c", ## defines token_type constants
        ],
    visibility = ["//visibility:public"]
)

################################################################
## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})

