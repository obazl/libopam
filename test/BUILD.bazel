load("@makeheaders//rules:makeheaders.bzl", "makeheaders")

load("//config/cc:CONFIG.bzl",
     "BASE_DEPS",
     "BASE_COPTS",
     "BASE_DEFINES",
     "BASE_LOCAL_DEFINES",
     "BASE_LINKOPTS")

COPTS         = BASE_COPTS
DEPS          = BASE_DEPS
LINKOPTS      = BASE_LINKOPTS
TOOLCHAINS = ["//:test_module_profiles"]

##########
cc_binary(
    name  = "config_test",
    linkstatic = 1,
    srcs  = [
        "config_test.c",
        ":mkhdrs"
    ],
    copts = COPTS + [
        # "-Isrc",
        "-I$(GENDIR)/src",
        "-I$(GENDIR)/test",
        # "-I$(@liblogc)/src",
        # "-I$(@uthash)/src"
    ],
    local_defines = BASE_LOCAL_DEFINES,
    defines = BASE_DEFINES,
    deps = [
        "@liblogc//lib:logc",
        "@uthash//lib:uthash",
        "//lib:opamc"
    ],
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "lex_test",
    linkstatic = 1,
    srcs  = [
        "lex_test.c",
        ":mkhdrs",
    ],
    deps = [
        "@liblogc//lib:logc",
        "@uthash//lib:uthash",
        "//lib/lexer:opam_lexer"
    ],
    copts = COPTS + [
        "-I$(GENDIR)/$(@)/lib/lexer",
        "-I$(GENDIR)/$(@)/test",
        # "-I$(@liblogc)/src",
        # "-I$(@uthash)/src"
    ],
    local_defines = BASE_LOCAL_DEFINES,
    defines = BASE_DEFINES,
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "parse_test",
    linkstatic = 1,
    srcs  = [
        "parse_test.c",
        ":mkhdrs"
    ],
    deps = [
        "@liblogc//lib:logc",
        "@uthash//lib:uthash",
        "//lib:opamc"
    ],
    copts = COPTS + [
        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test",
        # "-I$(@liblogc)/src",
        # "-I$(@uthash)/src"

        # "-I$(GENDIR)/src",
        # "-I$(GENDIR)/test",
        # "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
        # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
    ],
    local_defines = BASE_LOCAL_DEFINES,
    defines = BASE_DEFINES,
    toolchains = TOOLCHAINS,
)

################################################################
# cc_binary(
#     name  = "walk_test",
#     linkstatic = 1,
#     srcs  = [
#         "walk_test.c",
#         "walk_test.h",
#         # "//lib:liblogc.h"
#     ],
#     copts = COPTS + [

#         "-Isrc",
#         "-Itest",

#         "-I$(GENDIR)/src",
#         "-I$(GENDIR)/src/opam",
#         "-I$(GENDIR)/test/opam",

#         "-Ivendored/uthash",

#         "-Iexternal/mibl/src",
#         "-I$(GENDIR)/external/mibl/src",

#         "-Iexternal/mibl/opam/test",
#         "-I$(GENDIR)/external/mibl/test/opam",

#         "-Iexternal/libs7/src",
#     ],
#     defines = ["DEBUG", "TRACING"],
#     deps = [
#         "//lib:treewalker",
#         # "//lib:opam_lexer"
#     ],
# )

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "bazel_test.c",
        "config_test.c",
        # "crawl_test.c",
        "lex_test.c",
        "parse_test.c",
    ],
    additional_srcs = [
        # "//bazel:bazel_map_reduce.c",
    ],
    visibility = ["//visibility:public"]
)


##########
# cc_binary(
#     name  = "bazel_test",
#     linkstatic = 1,
#     srcs  = [
#         "bazel_test.c",
#         ":mkhdrs"
#     ],
#     deps = [
#         "@liblogc//lib:logc",
#         "@uthash//lib:uthash",
#         # "@findlibc//src:findlibc",
#         # "//bazel"
#     ],
#     copts = COPTS + [
#         # "-I$(GENDIR)/src",
#         "-I$(GENDIR)/bazel",
#         # "-I$(GENDIR)/test",
#         # "-I$(GENDIR)/$(@findlibc)/src",
#         "-I$(@liblogc)/src",
#         "-I$(@uthash)/src"
#     ],
#     local_defines = DEFINES,
#     toolchains = TOOLCHAINS,
# )

##########
# cc_binary(
#     name  = "crawl_test",
#     linkstatic = 1,
#     srcs  = [
#         "crawl_test.c",
#         ":mkhdrs"
#     ],
#     copts = COPTS + [
#         "-I$(GENDIR)/src",
#         "-I$(GENDIR)/test",
#         # "-I$(GENDIR)/external/libfindlib~{}/src".format(LIBFINDLIB_VERSION),
#         # "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
#         # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
#     ],
#     local_defines = DEFINES,
#     deps = [
#         "@liblogc//lib:logc",
#         "@uthash//lib:uthash",
#         # "@libfindlib//src:findlib"
#     ],
#     toolchains = TOOLCHAINS,
# )

