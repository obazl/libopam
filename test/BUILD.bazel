load("@makeheaders//src:RULES.bzl", "makeheaders")

load("//config/cc:BUILD.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS")

SRCS          = BASE_SRCS
COPTS         = BASE_COPTS + BASE_INCLUDE_PATHS
DEPS          = BASE_DEPS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS
TOOLCHAINS = ["//:test_repo_paths"]

##########
cc_binary(
    name  = "bazel_test",
    linkstatic = 1,
    srcs  = [
        "bazel_test.c",
        ":mkhdrs"
    ],
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash",
        "@findlibc//src:findlibc",
        "//bazel"
    ],
    copts = COPTS + [
        # "-I$(GENDIR)/src",
        # "-I$(GENDIR)/bazel",
        # "-I$(GENDIR)/test",
        "-I$(GENDIR)/$(@findlibc)/src",
        "-I$(@liblogc)/src",
        "-I$(@uthash)/src"
    ],
    local_defines = DEFINES,
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "crawl_test",
    linkstatic = 1,
    srcs  = [
        "crawl_test.c",
        ":mkhdrs"
    ],
    copts = COPTS + [
        "-I$(GENDIR)/src",
        "-I$(GENDIR)/test",
        # "-I$(GENDIR)/external/libfindlib~{}/src".format(LIBFINDLIB_VERSION),
        # "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
        # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
    ],
    local_defines = DEFINES,
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash",
        "@libfindlib//src:findlib"
    ],
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "config_test",
    linkstatic = 1,
    srcs  = [
        "config_test.c",
        ":mkhdrs"
    ],
    copts = COPTS + [
        # "-Isrc",
        "-I$(GENDIR)/src",
        "-I$(GENDIR)/test",
        # "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
        # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
    ],
    defines = ["DEBUG", "TRACING"],
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash",
        "//src:opamc"
    ],
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "lex_test",
    linkstatic = 1,
    srcs  = [
        "lex_test.c",
        ":mkhdrs",
    ],
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash",
        "//src/lexer:opam_lexer"
    ],
    copts = COPTS + [
        "-I$(GENDIR)/$(@)/src/lexer",
        "-I$(GENDIR)/$(@)/test",
        "-I$(@liblogc)/src",
        "-I$(@uthash)/src"
    ],
    defines = ["DEBUG", "TRACING"],
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "parse_test",
    linkstatic = 1,
    srcs  = [
        "parse_test.c",
        ":mkhdrs"
    ],
    deps = [
        "@liblogc//src:logc",
        "@uthash//src:uthash",
        "//src:opamc"
    ],
    copts = COPTS + [
        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/test",
        "-I$(@liblogc)/src",
        "-I$(@uthash)/src"

        # "-I$(GENDIR)/src",
        # "-I$(GENDIR)/test",
        # "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
        # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
    ],
    defines = ["DEBUG", "TRACING"],
    toolchains = TOOLCHAINS,
)

################################################################
# cc_binary(
#     name  = "walk_test",
#     linkstatic = 1,
#     srcs  = [
#         "walk_test.c",
#         "walk_test.h",
#         # "//src:log.h"
#     ],
#     copts = COPTS + [

#         "-Isrc",
#         "-Itest",

#         "-I$(GENDIR)/src",
#         "-I$(GENDIR)/src/opam",
#         "-I$(GENDIR)/test/opam",

#         "-Ivendored/uthash",

#         "-Iexternal/mibl/src",
#         "-I$(GENDIR)/external/mibl/src",

#         "-Iexternal/mibl/opam/test",
#         "-I$(GENDIR)/external/mibl/test/opam",

#         "-Iexternal/libs7/src",
#     ],
#     defines = ["DEBUG", "TRACING"],
#     deps = [
#         "//src:treewalker",
#         # "//src:opam_lexer"
#     ],
# )

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "bazel_test.c",
        "config_test.c",
        "crawl_test.c",
        "lex_test.c",
        "parse_test.c",
    ],
    additional_srcs = [
        "//bazel:bazel_map_reduce.c",
    ],
    visibility = ["//visibility:public"]
)
